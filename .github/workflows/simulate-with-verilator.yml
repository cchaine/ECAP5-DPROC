name: Simulated testing using verilator

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  REPORT_ARTIFACT_NAME: ecap5-dproc-report-${{github.run_number}}-${{github.run_attempt}}
  ARCH_ARTIFACT_NAME: ecap5-dproc-arch-${{github.run_number}}-${{github.run_attempt}}

jobs:
  documentation:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build

    - name: Generate documentation
      run: make -C ${{github.workspace}}/build docs

    - name: Check generated documentation
      run: (! grep -H "LaTeX Warning" ${{github.workspace}}/build/docs/**/*.log)

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.ARCH_ARTIFACT_NAME}}
        path: ${{github.workspace}}/build/docs/arch/main.pdf

  simulate:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build

    - name: Build simulation
      run: make -C ${{github.workspace}}/build build

    - name: Simulate
      id: simulate
      # Enable -k option to simulate every module even if one fails
      # Checks if there is any testdata
      # Check if there is any fail in that testdata
      run: >-
        make -C ${{github.workspace}}/build -k tests &&
        ls -A1q ${{github.workspace}}/build/tests/testdata/ | grep -q . && 
        (! grep -qe "[^;]*;0" ${{github.workspace}}/build/tests/testdata/*)

    - name: Cache build directory
      if: always()
      uses: actions/cache/save@v4.0.1
      env:
        cache-name: build-directory
        cache-folder-path: ${{github.workspace}}/build
      with:
        path: ${{ env.cache-folder-path }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-${{ github.run_attempt }}

  report:
    runs-on: self-hosted
    needs: simulate
    if: always()

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Import build directory
      uses: actions/cache/restore@v4.0.1
      env:
        cache-name: build-directory
        cache-folder-path: ${{github.workspace}}/build
      with:
        path: ${{ env.cache-folder-path }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-${{ github.run_attempt }}

    - name: Generate report
      run: >-
        make -C ${{github.workspace}}/build report_markdown &&
        make -C ${{github.workspace}}/build report

    - name: Write summary
      run: cat ${{github.workspace}}/build/report.md >> $GITHUB_STEP_SUMMARY

    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.REPORT_ARTIFACT_NAME}}
        path: ${{github.workspace}}/build/report.html

    - name: Check for report errors
      run: (! grep -qe "\[\!CAUTION\]" ${{github.workspace}}/build/report.md)

    - name: Generate badges
      if: ${{ github.ref == 'refs/heads/main' }}
      run: make -C ${{github.workspace}}/build badges;

    - name: Check generated badges
      if: ${{ always() && github.ref == 'refs/heads/main' }}
      run: >-
        if [ ! -f "build/test-result-badge.json" ]; then
          mkdir -p build &&
          echo "{\"schemaVersion\": 1, \"label\": \"Test result\", \"message\": \"Failed\", \"color\": \"red\"}" > build/test-result-badge.json;
        fi

    - name: Upload test result badge
      if: ${{ always() && github.ref == 'refs/heads/main' }}
      uses: exuanbo/actions-deploy-gist@v1.1.4
      with:
        token: ${{ secrets.GIST_SECRET }}
        gist_id: 32195ea7fa70c0218ef3f9952504c59e
        file_path: build/test-result-badge.json
        file_type: text 

    - name: Upload traceability result badge
      if: ${{ always() && github.ref == 'refs/heads/main' }}
      uses: exuanbo/actions-deploy-gist@v1.1.4
      with:
        token: ${{ secrets.GIST_SECRET }}
        gist_id: 32195ea7fa70c0218ef3f9952504c59e
        file_path: build/traceability-result-badge.json
        file_type: text 
